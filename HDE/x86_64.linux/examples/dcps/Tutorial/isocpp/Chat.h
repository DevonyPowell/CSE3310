//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: Chat.h
//  Source: ../idl/Chat.idl
//  Generated: Sat Feb 11 14:26:17 2017
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************
#ifndef _CHAT_H_
#define _CHAT_H_
#ifndef OPENSPLICE_ISOCXX_PSM
#define OPENSPLICE_ISOCXX_PSM
#endif

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include <dds/core/ddscore.hpp>


namespace Chat
{
   class ChatMessage;
   class NameService;
   class NamedMessage;
   const DDS::Long MAX_NAME = (DDS::Long) 32L;
   typedef ::std::string nameType;

   class ChatMessage OSPL_DDS_FINAL
   {
   public:
         ChatMessage() {}
         explicit ChatMessage(
                  DDS::Long userID,
                  DDS::Long index,
                  const ::std::string& content,
                  DDS::Long userAge)         :
                           userID_(userID),
                           index_(index),
                           content_(content),
                           userAge_(userAge) {}
#ifdef OSPL_DDS_CXX11
#  ifdef OSPL_CXX11_NO_FUNCTION_DEFAULTS
         ChatMessage(const ChatMessage& _other)
         :
                           userID_(_other.userID_),
                           index_(_other.index_),
                           content_(_other.content_),
                           userAge_(_other.userAge_)
         {}
         ChatMessage(ChatMessage&& _other)
         :
                           userID_(::std::move(_other.userID_)),
                           index_(::std::move(_other.index_)),
                           content_(::std::move(_other.content_)),
                           userAge_(::std::move(_other.userAge_))
         {}
         ChatMessage& operator=(ChatMessage&& _other)
         {
                  if (this != &_other)
                  {
                           userID_ = ::std::move(_other.userID_);
                           index_ = ::std::move(_other.index_);
                           content_ = ::std::move(_other.content_);
                           userAge_ = ::std::move(_other.userAge_);
                  }
                  return *this;
         }
         ChatMessage& operator=(const ChatMessage& _other)
         {
                  if (this != &_other)
                  {
                           userID_ = _other.userID_;
                           index_ = _other.index_;
                           content_ = _other.content_;
                           userAge_ = _other.userAge_;
                  }
                  return *this;
         }
#  else
         ChatMessage(const ChatMessage& _other) = default;
         ChatMessage(ChatMessage&& _other) = default;
         ChatMessage& operator=(ChatMessage&& _other) = default;
         ChatMessage& operator=(const ChatMessage& _other) = default;
#  endif
#endif
         DDS::Long userID() const { return this->userID_; }
         DDS::Long& userID() { return this->userID_; }
         void userID(DDS::Long _val_) { this->userID_ = _val_; }
#ifdef OSPL_DDS_CXX11
         void userID(DDS::Long&& _val_) { this->userID_ = _val_; }
#endif
         DDS::Long index() const { return this->index_; }
         DDS::Long& index() { return this->index_; }
         void index(DDS::Long _val_) { this->index_ = _val_; }
#ifdef OSPL_DDS_CXX11
         void index(DDS::Long&& _val_) { this->index_ = _val_; }
#endif
         const ::std::string& content() const { return this->content_; }
         ::std::string& content() { return this->content_; }
         void content(const ::std::string& _val_) { this->content_ = _val_; }
#ifdef OSPL_DDS_CXX11
         void content(::std::string&& _val_) { this->content_ = _val_; }
#endif
         DDS::Long userAge() const { return this->userAge_; }
         DDS::Long& userAge() { return this->userAge_; }
         void userAge(DDS::Long _val_) { this->userAge_ = _val_; }
#ifdef OSPL_DDS_CXX11
         void userAge(DDS::Long&& _val_) { this->userAge_ = _val_; }
#endif
         bool operator==(const ChatMessage& _other) const
         {
                  return userID_ == _other.userID_ &&
                  index_ == _other.index_ &&
                  content_ == _other.content_ &&
                  userAge_ == _other.userAge_;
         }
         bool operator!=(const ChatMessage& other) const
         {
                  return !(*this == other);
         }
         DDS::Long userID_;
         DDS::Long index_;
         ::std::string content_;
         DDS::Long userAge_;
   };


   class NameService OSPL_DDS_FINAL
   {
   public:
         NameService() {}
         explicit NameService(
                  DDS::Long userID,
                  const ::std::string& name)         :
                           userID_(userID),
                           name_(name) {}
#ifdef OSPL_DDS_CXX11
#  ifdef OSPL_CXX11_NO_FUNCTION_DEFAULTS
         NameService(const NameService& _other)
         :
                           userID_(_other.userID_),
                           name_(_other.name_)
         {}
         NameService(NameService&& _other)
         :
                           userID_(::std::move(_other.userID_)),
                           name_(::std::move(_other.name_))
         {}
         NameService& operator=(NameService&& _other)
         {
                  if (this != &_other)
                  {
                           userID_ = ::std::move(_other.userID_);
                           name_ = ::std::move(_other.name_);
                  }
                  return *this;
         }
         NameService& operator=(const NameService& _other)
         {
                  if (this != &_other)
                  {
                           userID_ = _other.userID_;
                           name_ = _other.name_;
                  }
                  return *this;
         }
#  else
         NameService(const NameService& _other) = default;
         NameService(NameService&& _other) = default;
         NameService& operator=(NameService&& _other) = default;
         NameService& operator=(const NameService& _other) = default;
#  endif
#endif
         DDS::Long userID() const { return this->userID_; }
         DDS::Long& userID() { return this->userID_; }
         void userID(DDS::Long _val_) { this->userID_ = _val_; }
#ifdef OSPL_DDS_CXX11
         void userID(DDS::Long&& _val_) { this->userID_ = _val_; }
#endif
         const ::std::string& name() const { return this->name_; }
         ::std::string& name() { return this->name_; }
         void name(const ::std::string& _val_) { this->name_ = _val_; }
#ifdef OSPL_DDS_CXX11
         void name(::std::string&& _val_) { this->name_ = _val_; }
#endif
         bool operator==(const NameService& _other) const
         {
                  return userID_ == _other.userID_ &&
                  name_ == _other.name_;
         }
         bool operator!=(const NameService& other) const
         {
                  return !(*this == other);
         }
         DDS::Long userID_;
         ::std::string name_;
   };


   class NamedMessage OSPL_DDS_FINAL
   {
   public:
         NamedMessage() {}
         explicit NamedMessage(
                  DDS::Long userID,
                  const ::std::string& userName,
                  DDS::Long index,
                  const ::std::string& content)         :
                           userID_(userID),
                           userName_(userName),
                           index_(index),
                           content_(content) {}
#ifdef OSPL_DDS_CXX11
#  ifdef OSPL_CXX11_NO_FUNCTION_DEFAULTS
         NamedMessage(const NamedMessage& _other)
         :
                           userID_(_other.userID_),
                           userName_(_other.userName_),
                           index_(_other.index_),
                           content_(_other.content_)
         {}
         NamedMessage(NamedMessage&& _other)
         :
                           userID_(::std::move(_other.userID_)),
                           userName_(::std::move(_other.userName_)),
                           index_(::std::move(_other.index_)),
                           content_(::std::move(_other.content_))
         {}
         NamedMessage& operator=(NamedMessage&& _other)
         {
                  if (this != &_other)
                  {
                           userID_ = ::std::move(_other.userID_);
                           userName_ = ::std::move(_other.userName_);
                           index_ = ::std::move(_other.index_);
                           content_ = ::std::move(_other.content_);
                  }
                  return *this;
         }
         NamedMessage& operator=(const NamedMessage& _other)
         {
                  if (this != &_other)
                  {
                           userID_ = _other.userID_;
                           userName_ = _other.userName_;
                           index_ = _other.index_;
                           content_ = _other.content_;
                  }
                  return *this;
         }
#  else
         NamedMessage(const NamedMessage& _other) = default;
         NamedMessage(NamedMessage&& _other) = default;
         NamedMessage& operator=(NamedMessage&& _other) = default;
         NamedMessage& operator=(const NamedMessage& _other) = default;
#  endif
#endif
         DDS::Long userID() const { return this->userID_; }
         DDS::Long& userID() { return this->userID_; }
         void userID(DDS::Long _val_) { this->userID_ = _val_; }
#ifdef OSPL_DDS_CXX11
         void userID(DDS::Long&& _val_) { this->userID_ = _val_; }
#endif
         const ::std::string& userName() const { return this->userName_; }
         ::std::string& userName() { return this->userName_; }
         void userName(const ::std::string& _val_) { this->userName_ = _val_; }
#ifdef OSPL_DDS_CXX11
         void userName(::std::string&& _val_) { this->userName_ = _val_; }
#endif
         DDS::Long index() const { return this->index_; }
         DDS::Long& index() { return this->index_; }
         void index(DDS::Long _val_) { this->index_ = _val_; }
#ifdef OSPL_DDS_CXX11
         void index(DDS::Long&& _val_) { this->index_ = _val_; }
#endif
         const ::std::string& content() const { return this->content_; }
         ::std::string& content() { return this->content_; }
         void content(const ::std::string& _val_) { this->content_ = _val_; }
#ifdef OSPL_DDS_CXX11
         void content(::std::string&& _val_) { this->content_ = _val_; }
#endif
         bool operator==(const NamedMessage& _other) const
         {
                  return userID_ == _other.userID_ &&
                  userName_ == _other.userName_ &&
                  index_ == _other.index_ &&
                  content_ == _other.content_;
         }
         bool operator!=(const NamedMessage& other) const
         {
                  return !(*this == other);
         }
         DDS::Long userID_;
         ::std::string userName_;
         DDS::Long index_;
         ::std::string content_;
   };

}




#endif 
